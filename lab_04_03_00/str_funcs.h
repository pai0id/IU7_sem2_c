#ifndef STR_FUNCS_H
#define STR_FUNCS_H

#include "sizes.h"
#include <stdio.h>
#include <string.h>

/// \brief Считывает строку с клавиатуры.
/// Буфер существует, размер корректный.
///
/// \param buf [in] - указатель на буфер, в который будет записана считанная строка
/// \param buf_size [in] - размер буфера
///
/// \return Код ошибки:
///         - OK, если строка успешно считана и обработана
///         - ERR_IO, если произошла ошибка ввода-вывода
///         - ERR_BUF_TOO_SMALL, если размер буфера недостаточен для считывания строки
int get_line(char *buf, size_t buf_size);

/// \brief Разбивает строку на слова и копирует их в массив.
/// Строка существует и корректна, массив существует.
///
/// \param str [in] - указатель на строку, которую нужно разбить на слова
/// \param words [out] - массив, в который будут скопированы слова
/// \param words_n [out] - указатель на переменную, в которую будет записано количество скопированных слов
///
/// \return Код ошибки:
///         - OK, если все слова успешно скопированы
///         - ERR_BUF_TOO_SMALL, если размер буфера недостаточен для копирования слова
///         - ERR_TOO_MANY_WORDS, если количество слов превышает максимально допустимое значение
int parse_string(char *str, char words[][WRD_LEN + 1], size_t *words_n);

/// \brief Удаляет символ из строки.
/// 
/// Функция удаляет символ, на который указывает указатель p, из строки str.
/// Строка корректна, символ содержится в этой строке.
/// 
/// \param str [in, out] - Указатель на строку, из которой нужно удалить символ.
/// \param p [in] - Указатель на символ, который нужно удалить из строки.
void del_char(char *str, char *p);

/// \brief Обрабатывает слово.
/// 
/// Функция удаляет все символы, равные первому символу слова word,
/// начиная с последнего символа и до первого символа (не включая его).
/// Слово корректно.
///
/// \param word [in, out] Указатель на слово, которое нужно обработать.
void process_word(char word[]);

/// \brief Формирует строку из слов, расположенных в массиве.
///
/// Функция формирует строку из слов, расположенных в массиве words,
/// в обратном порядке, предварительно их обрабатывая и исключая слова совпадающие с последним.
/// Массив слов корректен, буфер buf имеет достаточный размер для хранения результирующей строки.
///
/// \param words [in] Массив слов.
/// \param words_n [in] Количество слов в массиве.
/// \param buf [out] Буфер для записи результирующей строки.
///
/// \return Код ошибки:
///         - OK, если все слова успешно скопированы
///         - ERR_EMPTY_RES_STR все слова совпадают с последним
int form_string(char words[][WRD_LEN + 1], size_t words_n, char *buf);

#endif
